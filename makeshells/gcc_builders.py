

class BuilderError(Exception):
  pass

# this is a bad way to do things, but it's quick to write
class ShellScript:
  def __init__(self, path):
    self.path = path
    self.var_id = 0
    with open(self.path, "w") as s:
      s.write(
        "#!/bin/sh\n"
        "#\n"
        "# Generated by: https://github.com/davepfeiffer/pyforeman\n"
        "#\n\n"
      )

  def add_var(self, var):
    self.append_command("VAR{}='{}'\n".format(self.var_id, var))
    self.var_id += 1
    return "VAR{}".format(self.var_id - 1)

  def append_command(self, command):
    with open(self.path, "a") as s:
      s.write(command + "\n")

# python imports . . .
def name_check(env, name):
  if name in env:
    raise BuilderError("Blueprint name conflict: {}".format(name))


def material_check(env, materials):
  if not materials <= env:
    missing = []
    for material in materials:
      if not material in env:
        missing.append(material.name)
    # raise BuilderError("Materials missing from environment: {}".format(missing))

def hire_level_builder(script):
  def builder(env):
    script.append_command("wait\n")
  return builder

def hire_file_collector(script):
  def builder(env, target, materials):
    name_check(env, target)
    material_check(env, materials)
    script.append_command("test -e {} || \\\n"
                          "\t(echo '{} not found' && exit 1) &\n"
                          "".format(target, target))
    return target
  return builder

def hire_builder(gcc_path, flags, script):
  flag_var = script.add_var(flags)
  def builder(env, target, materials):
    name_check(env, target)         # ensure target is unique
    material_check(env, materials)  # ensure required materials are present
    sources = ""
    for m in materials:
      sources += m.name + " "
    # TODO: insert cmds to check if the target is newer than the dependancies
    script.append_command("{} ${} \\\n\t{}\\\n\t-o {} && \\\n"
                          "\techo \"Built target: {}\" &\n"
                          "".format(gcc_path, flag_var, sources, target, 
                                    target))
    return target
  return builder

def hire_objcopy(gcc_path, flags, script):
  def builder(env, target, materials):
    name_check(env, target)
    material_check(env, materials)
    sources = ""
    for m in materials:
      sources += m.name + " "
    script.append_command("{} {} \\\n\t{}\\\n\t{} && \\\n"
                          "\techo \"Built Intel hex file: {}\" &\n"
                          "".format(gcc_path, flags, sources, target, target))
    return target
  return builder

def hire_objdump(gcc_path, flags, script):
  def builder(env, target, materials):
    name_check(env, target)
    material_check(env, materials)
    sources = " "
    for m in materials:
      sources += m.name + " "
    script.append_command("{} {} {} > {} && \\\n"
                          "\techo \"Built list of objects: {}\" &\n"
                          "".format(gcc_path, flags, sources, target, target))
    return target
  return builder
